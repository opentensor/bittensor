name: E2E Subtensor Tests

concurrency:
  group: e2e-subtensor-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - '**'
    types: [ opened, synchronize, reopened, ready_for_review, labeled, unlabeled ]

  workflow_dispatch:
    inputs:
      verbose:
        description: "Output more information when triggered manually"
        required: false
        default: ""

# job to run tests in parallel
jobs:
  # keep python version in one place
  decide-versions:
    runs-on: ubuntu-latest
    outputs:
      py_json: ${{ steps.set.outputs.py_json }}
    steps:
      - id: set
        run: |
          echo 'py_json=["3.10", "3.11","3.12","3.13"]' >> "$GITHUB_OUTPUT"

  # prepare dependencies for all jobs ib cache
  prepare-deps:
    needs: decide-versions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.decide-versions.outputs.py_json) }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - name: Cache uv and venv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            uv-${{ runner.os }}-py${{ matrix.python-version }}-

      - name: Sync deps (populate cache on miss)
        run: uv sync --extra dev --dev

  # Looking for e2e tests
  find-tests:
    needs: prepare-deps
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.draft == false }}
    outputs:
      test-files: ${{ steps.get-tests.outputs.test-files }}
    steps:
      - name: Check-out repository under $GITHUB_WORKSPACE
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - name: Cache uv and venv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            uv-${{ runner.os }}-py${{ matrix.python-version }}-

      - name: Install dependencies (faster if cache hit)
        run: uv sync --extra dev --dev

      - name: Find test files
        id: get-tests
        shell: bash
        run: |
          set -euo pipefail
          test_matrix=$(
            uv run pytest -q --collect-only tests/e2e_tests \
            | sed -n '/^e2e_tests\//p' \
            | sed 's|^|tests/|' \
            | jq -R -s -c '
                split("\n")
                | map(select(. != ""))
                | map({nodeid: ., label: (sub("^tests/e2e_tests/"; ""))})
              '
          )
          echo "Found tests: $test_matrix"
          echo "test-files=$test_matrix" >> "$GITHUB_OUTPUT"

  # Pull docker image
  pull-docker-image:
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.set-image.outputs.image }}
    steps:
      - name: Set Docker image tag based on label or branch
        id: set-image
        run: |
          echo "Event: $GITHUB_EVENT_NAME"
          echo "Branch: $GITHUB_REF_NAME"
          
          echo "Reading labels ..."
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            labels=$(jq -r '.pull_request.labels[].name' "$GITHUB_EVENT_PATH")
          else
            labels=""
          fi
    
          image=""
    
          for label in $labels; do
            echo "Found label: $label"
            case "$label" in
              "subtensor-localnet:main")
                image="ghcr.io/opentensor/subtensor-localnet:main"
                break
                ;;
              "subtensor-localnet:testnet")
                image="ghcr.io/opentensor/subtensor-localnet:testnet"
                break
                ;;
              "subtensor-localnet:devnet")
                image="ghcr.io/opentensor/subtensor-localnet:devnet"
                break
                ;;
            esac
          done
    
          if [[ -z "$image" ]]; then
            # fallback to default based on branch
            if [[ "${GITHUB_REF_NAME}" == "master" ]]; then
              image="ghcr.io/opentensor/subtensor-localnet:main"
            else
              image="ghcr.io/opentensor/subtensor-localnet:devnet-ready"
            fi
          fi
    
          echo "âœ… Final selected image: $image"
          echo "image=$image" >> "$GITHUB_OUTPUT"

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Pull Docker Image
        run: docker pull ${{ steps.set-image.outputs.image }}

      - name: Save Docker Image to Cache
        run: docker save -o subtensor-localnet.tar ${{ steps.set-image.outputs.image }}

      - name: Upload Docker Image as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: subtensor-localnet
          path: subtensor-localnet.tar
          compression-level: 0

  # Job to run tests in parallel
  # Since GH Actions matrix has a limit of 256 jobs, we need to split the tests into multiple jobs with different
  # Python versions. To reduce DRY we use reusable workflow.

  e2e-test:
    name: ${{ matrix.label }}
    needs:
      - decide-versions
      - find-tests
      - pull-docker-image
    strategy:
      fail-fast: false
      max-parallel: 16
      matrix:
        include: ${{ fromJson(needs.find-tests.outputs.test-files) }}
    uses: ./.github/workflows/_run-e2e-single.yaml
    with:
      nodeid: ${{ matrix.nodeid }}
      image-name: ${{ needs.pull-docker-image.outputs.image-name }}
      python-versions: ${{ needs.decide-versions.outputs.py_json }}
    secrets: inherit
