name: E2E Subtensor Tests

concurrency:
  group: e2e-subtensor-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [master, development, staging]

  pull_request:
    branches: [master, development, staging]
    types: [ opened, synchronize, reopened, ready_for_review ]

  schedule:
    - cron: '0 9 * * *'  # Run every night at 2:00 PST

  workflow_dispatch:
    inputs:
      verbose:
        description: "Output more information when triggered manually"
        required: false
        default: ""

env:
  CARGO_TERM_COLOR: always
  VERBOSE: ${{ github.event.inputs.verbose }}

# job to run tests in parallel
jobs:

  find-tests:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.draft == false }}
    outputs:
      test-files: ${{ steps.get-tests.outputs.test-files }}
    steps:
      - name: Check-out repository under $GITHUB_WORKSPACE
        uses: actions/checkout@v4

      - name: Find test files
        id: get-tests
        run: |
          test_files=$(find tests/e2e_tests -name "test*.py" | jq -R -s -c 'split("\n") | map(select(. != ""))')
          # keep it here for future debug
          # test_files=$(find tests/e2e_tests -type f -name "test*.py" | grep -E 'test_(incentive|commit_weights|set_weights)\.py$' | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "test-files=$test_files" >> "$GITHUB_OUTPUT"
        shell: bash

  pull-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Pull Docker Image
        run: docker pull ghcr.io/opentensor/subtensor-localnet:devnet-ready

      - name: Save Docker Image to Cache
        run: docker save -o subtensor-localnet.tar ghcr.io/opentensor/subtensor-localnet:devnet-ready

      - name: Upload Docker Image as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: subtensor-localnet
          path: subtensor-localnet.tar

  # Job to run tests in parallel
#  run-e2e-test:
#    name: "FB: ${{ matrix.test-file }} / Python ${{ matrix.python-version }}"
#    needs:
#      - find-tests
#      - pull-docker-image
#    runs-on: ubuntu-latest
#    timeout-minutes: 45
#    strategy:
#      fail-fast: false  # Allow other matrix jobs to run even if this job fails
#      max-parallel: 32  # Set the maximum number of parallel jobs (same as we have cores in ubuntu-latest runner)
#      matrix:
#        os:
#          - ubuntu-latest
#        test-file: ${{ fromJson(needs.find-tests.outputs.test-files) }}
#        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
#    steps:
#      - name: Check-out repository
#        uses: actions/checkout@v4
#
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v5
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install uv
#        uses: astral-sh/setup-uv@v4
#
#      - name: install dependencies
#        run: uv sync --extra dev --dev
#
#      - name: Download Cached Docker Image
#        uses: actions/download-artifact@v4
#        with:
#          name: subtensor-localnet
#
#      - name: Load Docker Image
#        run: docker load -i subtensor-localnet.tar
#
##      - name: Run tests
##        run: uv run pytest ${{ matrix.test-file }} -s
#
#      - name: Run tests with retry
#        run: |
#          set +e
#          for i in 1 2 3; do
#            echo "üîÅ Attempt $i: Running tests"
#            uv run pytest ${{ matrix.test-file }} -s
#            status=$?
#            if [ $status -eq 0 ]; then
#              echo "‚úÖ Tests passed on attempt $i"
#              break
#            else
#              echo "‚ùå Tests failed on attempt $i"
#              if [ $i -eq 3 ]; then
#                echo "Tests failed after 3 attempts"
#                exit 1
#              fi
#              echo "Retrying..."
#              sleep 5
#            fi
#          done

# `build-patched-image` and `cron-e2e-test-with-non-fast-block` should run once per week
  build-patched-image:
#    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest

    outputs:
      image_name: ${{ steps.set-image.outputs.image_name }}

    steps:
#      - name: Check if today is Saturday
#        id: set-status
#        run: |
#          day=$(date -u +%u)
#          echo "Today is weekday $day"
#          if [ "$day" -ne 6 ]; then
#            echo "image_built=false" >> $GITHUB_OUTPUT
#          else
#            echo "image_built=true" >> $GITHUB_OUTPUT

      - name: Clone + Patch (set 5 blocks instead of 7 days)
        run: |
          git clone https://github.com/opentensor/subtensor.git
          cd subtensor
          git checkout devnet-ready
          sed -i 's|7 \* 24 \* 60 \* 60 / 12 // 7 days|5 // Only 5 blocks for tests|' runtime/src/lib.rs

#      - name: Build Docker image
#        run: |
#          cd subtensor
#          docker build -t subtensor-patched-devnet .
#
#      - name: Save Docker image
#        run: docker save subtensor-patched-devnet -o subtensor-patched-localnet.tar
#
#      - name: Upload image as artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: subtensor-patched-localnet
#          path: subtensor-patched-localnet.tar


  cron-e2e-test-with-non-fast-block:
#    if: github.event_name == 'schedule' && needs.build-patched-image.outputs.image_built == 'true'
    name: "NFB: ${{ matrix.test-file }} / Python ${{ matrix.python-version }}"
    needs: [find-tests, build-patched-image]

    runs-on: ubuntu-latest
    timeout-minutes: 300

    strategy:
      fail-fast: false  # Allow other matrix jobs to run even if this job fails
      max-parallel: 32  # Set the maximum number of parallel jobs (same as we have cores in ubuntu-latest runner)
      matrix:
        os:
          - ubuntu-latest
        test-file: ${{ fromJson(needs.find-tests.outputs.test-files) }}
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: install dependencies
        run: uv sync --extra dev --dev

#      - name: Download Cached Docker Image
#        uses: actions/download-artifact@v4
#        with:
#          name: subtensor-patched-localnet
#
#      - name: Load Docker image
#        run: docker load -i subtensor-patched-localnet.tar

      - name: Run patched E2E tests
        env:
          LOCALNET_IMAGE_NAME: "subtensor-patched-localnet"
          FAST_BLOCKS: "False"
        run: |
          echo "LOCALNET_IMAGE_NAME=${LOCALNET_IMAGE_NAME}"
          echo "FAST_BLOCKS=${FAST_BLOCKS}"
          set +e
          for i in 1 2 3; do
            echo "üîÅ Attempt $i: Running tests"
            uv run pytest ${{ matrix.test-file }} -s
            status=$?
            if [ $status -eq 0 ]; then
              echo "‚úÖ Tests passed on attempt $i"
              break
            else
              echo "‚ùå Tests failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "Tests failed after 3 attempts"
                exit 1
              fi
              echo "Retrying..."
              sleep 5
            fi
          done
