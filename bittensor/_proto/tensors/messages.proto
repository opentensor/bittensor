// python3 -m grpc.tools.protoc bittensor/_proto/tensors/messages.proto  -I. --python_out=. --grpc_python_out=. --proto_path bittensor/_proto/

syntax = "proto3";

/////////////////
// TensorProto //
/////////////////
// A serialized tensor object created using the serializer class.
// SIZE: 32 bytes + variable buffer size.
message Tensor {
	// Version: [REQUIRED] Strictly increasing protocol version identifier.
	// Indentifies protocol version for backward compatibility.
	// i.e. '0.1.5' = (100 * 0) + (10 * 1) + (1 * 5) = 15
	int32 version = 1;

	// Buffer: [REQUIRED] Serialized raw tensor content.
	bytes buffer = 2;

	// Shape: [REQUIRED] Shape of this tensor.
	// NOTE: Variable dimensions (i.e. batch) are non-explicit here as -1.
	// ~ 5 * int32 = 128 bits - (16 bytes)
	repeated int64 shape = 3;

	// Serializer: [REQUIRED] Specifies the serialization/deserialization method.
	// Users should be able to decode all tensors by specifying the encoding type and the raw data. 
	// i.e.
	// 1. (client) serializer = bittensor.bittensor.serializer_for_type(bittensor.Serializer.MSGPACK)
	// 2. (client) serializer.serialize(torch.Tensor, from_type = bittensor.proto.TensorType.TORCH) --> bittensor.proto.Tensor
	// 3. (server) deserializer = bittensor.bittensor.serializer_for_type(request.serialzer)
	// 4. (server) deserializer.deserialize(request.tensor, to_type = bittensor.proto.TensorType.TENSORFLOW) --> tensorflow.Tensor    	
	// SIZE: 32-bits (4 bytes)
	Serializer serializer = 4;

	// TensorType: [REQUIRED] Purely a placeholder, not used in deserialization etc, 
	// however, could come in handy later
	// SIZE: 32-bits (4 bytes)
	TensorType tensor_type = 5;
    	
	// Dtype: [REQUIRED] The tensor datatype.
	// Used for serialization deserialization.
	// int32 32-bits (4-bytes)
	DataType dtype = 6;

	// Requires grad: [OPTIONAL] Does this tensor require a gradient.
	// 1 bit.
	bool requires_grad = 8;
}


enum Serializer {
	// PICKLE = 0; // PICKLE serializer (REMOVED for security reasons.)
	MSGPACK = 0; // MSGPACK serializer
	CMPPACK = 1; // CMPPACK serializer
}

// TensorType: [REQUIRED] The tensor type, for use between multipl frameworks.
enum TensorType {
	TORCH = 0; // Torch object
	TENSORFLOW = 1; // Tensorflow tensor type.
	NUMPY = 2; // Numpy tensor type.
}

// Dtype: [REQUIRED] The tensor datatype.
// Used for serialization deserialization.
// int32 32-bits (4-bytes)
enum DataType {
	UNKNOWN = 0;
	FLOAT32 = 1;
	FLOAT64 = 2;
	INT32 = 3;
	INT64 = 4;
	UTF8 = 5;
	FLOAT16 = 6;
}
